{"version":3,"sources":["components/common/Loading.jsx","utils/function.js","static/Spinner-1s-200px.gif","components/common/TopNav.jsx","App.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","url","require","Loading","props","a","createElement","className","global","src","alt","d","__webpack_exports__","throttle","debounce","method","duration","begin","Date","args","arguments","current","apply","this","delay","timer","context","clearTimeout","setTimeout","module","exports","p","menu","name","activeEvent","match","location","TopNav","device","mobileOpen","handleToggle","closeToggle","react_default","onClick","concat","map","element","index","key","NavLink","activeClassName","isActive","to","exact","Home","lazy","Promise","all","e","then","bind","NewsTemplate","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","judgeWindowSize","window","matchMedia","matches","setState","prevState","state","_this2","addEventListener","_this$state","BrowserRouter","basename","process","common_TopNav","react","fallback","Switch","Route","path","component","render","onRouterEnter","console","log","Component","Boolean","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a35940a3.chunk.js","sourcesContent":["import React from 'react';\nconst url = require('../../static/Spinner-1s-200px.gif');\n\nconst Loading = (props) => {\n    return (\n        <div className={props.global?'loading':'loading-partial'}>\n            <img src={url} alt=\"Loading...\"/>\n        </div>\n    );\n};\n\nexport default Loading;\n","export const throttle = (method,duration)=>{\n    let  begin=new Date();\n    return function(){\n        let context=this, args=arguments, current=new Date();\n        if(current-begin>=duration){\n            method.apply(context,args);\n            begin=current;\n        }\n    }\n};\n\nexport const debounce = (method,delay)=>{\n    let timer=null;\n    return function(){\n        let context=this, args=arguments;\n        clearTimeout(timer);\n        timer=setTimeout(function(){\n            method.apply(context,args);\n        },delay);\n    }\n};","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.2a947ab3.gif\";","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst menu = [\n    {name: 'Home', url: '/'},\n    {name: 'Top News', url: '/top-news'},\n    {name: 'Business', url: '/business'},\n    {name: 'Entertainment', url: '/entertainment'},\n    {name: 'General', url: '/general'},\n    {name: 'Health', url: '/health'},\n    {name: 'Science', url: '/science'},\n    {name: 'Sports', url: '/sports'},\n    {name: 'Technology', url: '/technology'}\n];\n\n\n\nconst activeEvent = (match, location) => {\n    return match\n};\n\nconst TopNav = (props) => {\n    const {device,mobileOpen,handleToggle,closeToggle} = props;\n\n    return (\n        <div>\n            <div className={'top-nav'}>\n                {device==='mobile'?<div className={'mobile-toggle'} onClick={handleToggle}>\n                    <span className={'line'}/>\n                    <span className={'line'}/>\n                    <span className={'line'}/>\n                </div>:''}\n                <div className={'top-logo'}>React News</div>\n                <div className={device==='mobile'?`mobile-menu ${mobileOpen?'':'hide'}`:'top-menu'}>\n                    {\n                        menu.map((element, index) => {\n                            return <div key={index}>\n                                <NavLink activeClassName={'top-link-active'}\n                                         className={'top-link'}\n                                         isActive={activeEvent}\n                                         onClick={closeToggle}\n                                         to={element.url}\n                                         exact\n                                >\n                                    {element.name}\n                                </NavLink>\n                            </div>\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TopNav;\n","import React, {Component, lazy, Suspense} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport TopNav from './components/common/TopNav';\nimport Loading from './components/common/Loading';\nimport {throttle} from './utils/function';\nimport './App.css';\n\nconst Home = lazy(() => import('./components/Home'));\nconst NewsTemplate = lazy(()=>import('./components/common/NewsTemplate'));\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = ({\n            device:'pc',\n            mobileOpen:false\n        })\n    }\n\n    judgeWindowSize = ()=>{\n        let device = 'pc';\n        if(window.matchMedia('(max-width: 768px)').matches){\n            device = 'mobile'\n        }else{\n            device = 'pc'\n        }\n        this.setState({\n            device:device\n        })\n    };\n\n    handleToggle = ()=>{\n        this.setState(prevState=>({\n            mobileOpen:!prevState.mobileOpen\n        }))\n    };\n\n    closeToggle=()=>{\n        this.setState({\n            mobileOpen:false\n        })\n    }\n\n    componentDidMount(){\n        this.judgeWindowSize();\n        window.addEventListener('resize',(e)=>{\n            throttle(this.judgeWindowSize(),50)\n        });\n    }\n    render() {\n        const {device,mobileOpen} = this.state;\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <div>\n                    <TopNav device={device} mobileOpen={mobileOpen} closeToggle={this.closeToggle} handleToggle={this.handleToggle}/>\n                    <Suspense fallback={<Loading global={true}/>}>\n                        <Switch>\n                            <Route path='/' component={props=><Home/>} exact/>\n                            <Route path={'/top-news'} key={'top-news'} render={props=><NewsTemplate {...props}/>} onRouterEnter={match=>console.log(match)}/>\n                            <Route path={'/business'} key={'business'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/entertainment'} key={'entertainment'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/general'} key={'general'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/health'} key={'health'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/science'} key={'science'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/sports'} key={'sports'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/technology'} key={'technology'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route render={(props) => (404)}/>\n                        </Switch>\n                    </Suspense>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}