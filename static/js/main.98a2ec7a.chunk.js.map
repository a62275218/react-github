{"version":3,"sources":["components/common/TopNav.jsx","App.js","serviceWorker.js","index.js"],"names":["menu","name","url","TopNav","react_default","a","createElement","className","map","element","index","key","NavLink","to","Home","lazy","Promise","all","__webpack_require__","e","then","bind","TopNews","App","BrowserRouter","common_TopNav","react","fallback","Switch","Route","path","component","props","exact","render","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSAGMA,EAAO,CACT,CAACC,KAAK,OAAOC,IAAI,KACjB,CAACD,KAAK,WAAYC,IAAI,aACtB,CAACD,KAAK,WAAYC,IAAI,aACtB,CAACD,KAAK,gBAAiBC,IAAI,kBAC3B,CAACD,KAAK,UAAUC,IAAI,YACpB,CAACD,KAAK,SAASC,IAAI,WACnB,CAACD,KAAK,UAAUC,IAAI,YACpB,CAACD,KAAK,SAASC,IAAI,WACnB,CAACD,KAAK,aAAaC,IAAI,gBAiBZC,EAdA,WACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WAERP,EAAKQ,IAAI,SAACC,EAAQC,GACd,OAAON,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,GACbN,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAASC,GAAIJ,EAAQP,KAAMO,EAAQR,WChBrDa,SAAOC,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAClBC,EAAUP,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAqBZE,mLAjBP,OACInB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACIpB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAA,SAAD,CAAUC,SAAU,cAChBvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACIxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,KAAM,IAAKC,UAAW,SAAAC,GAAK,OAAE5B,EAAAC,EAAAC,cAACQ,EAAD,OAASmB,OAAK,IAClD7B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,KAAM,YAAaC,UAAW,SAAAC,GAAK,OAAE5B,EAAAC,EAAAC,cAACgB,EAAD,SAC5ClB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOK,OAAQ,SAACF,GAAD,OAAY,kBAVrCG,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAO9B,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.98a2ec7a.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst menu = [\n    {name:'Home',url:'/'},\n    {name:'Top News', url:'/top-news'},\n    {name:'Business', url:'/business'},\n    {name:'Entertainment', url:'/entertainment'},\n    {name:'General',url:'/general'},\n    {name:'Health',url:'/health'},\n    {name:'Science',url:'/science'},\n    {name:'Sports',url:'/sports'},\n    {name:'Technology',url:'/technology'}\n];\n\nconst TopNav = () => {\n    return (\n        <div className={'top-nav'}>\n            {\n                menu.map((element,index)=>{\n                    return <div key={index}>\n                        <NavLink to={element.url}>{element.name}</NavLink>\n                    </div>\n                })\n            }\n        </div>\n    );\n};\n\nexport default TopNav;\n","import React, {Component, lazy, Suspense} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport TopNav from './components/common/TopNav'\nimport './App.css';\n\nconst Home = lazy(() => import('./components/Home'));\nconst TopNews = lazy(() => import('./components/TopNews'));\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <TopNav/>\n                    <Suspense fallback={'loading...'}>\n                        <Switch>\n                            <Route path={'/'} component={props=><Home/>} exact/>\n                            <Route path={'/top-news'} component={props=><TopNews/>}/>\n                            <Route render={(props) => (404)}/>\n                        </Switch>\n                    </Suspense>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}