{"version":3,"sources":["components/common/Loading.jsx","utils/function.js","static/Spinner-1s-200px.gif","components/common/TopNav.jsx","App.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","url","require","Loading","props","a","createElement","className","global","src","alt","d","__webpack_exports__","throttle","debounce","getDocumentHeight","getScrollTop","getClientHeight","method","duration","begin","Date","args","arguments","current","apply","this","delay","timer","context","clearTimeout","setTimeout","body","document","documentElement","Math","max","offsetHeight","scrollHeight","clientHeight","scrollTop","window","innerHeight","module","exports","p","menu","name","activeEvent","match","location","TopNav","device","mobileOpen","handleToggle","closeToggle","react_default","onClick","concat","map","element","index","key","NavLink","activeClassName","isActive","to","exact","Home","lazy","Promise","all","e","then","bind","NewsTemplate","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","judgeWindowSize","state","compareDevice","matchMedia","matches","setState","prevState","_this2","addEventListener","preventDefault","_this$state","BrowserRouter","basename","process","common_TopNav","react","fallback","Switch","Route","path","component","render","onRouterEnter","console","log","Component","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40921dc9.chunk.js","sourcesContent":["import React from 'react';\nconst url = require('../../static/Spinner-1s-200px.gif');\n\nconst Loading = (props) => {\n    return (\n        <div className={props.global?'loading':'loading-partial'}>\n            <img src={url} alt=\"Loading...\"/>\n        </div>\n    );\n};\n\nexport default Loading;\n","export const throttle = (method,duration)=>{\n    let  begin=new Date();\n    return function(){\n        let context=this, args=arguments, current=new Date();\n        if(current-begin>=duration){\n            method.apply(context,args);\n            begin=current;\n        }\n    }\n};\n\nexport const debounce = (method,delay)=>{\n    let timer=null;\n    return function(){\n        let context=this, args=arguments;\n        clearTimeout(timer);\n        timer=setTimeout(function(){\n            method.apply(context,args);\n        },delay);\n    }\n};\n\nconst body = document.documentElement || document.body;\n\nexport const getDocumentHeight = ()=>{\n    return Math.max(body.offsetHeight,body.scrollHeight,body.clientHeight)\n};\n\nexport const getScrollTop = ()=>{\n    return body.scrollTop\n};\n\nexport const getClientHeight = ()=>{\n    return window.innerHeight || body.clientHeight\n}","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.2a947ab3.gif\";","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nconst menu = [\n    {name: 'Home', url: '/'},\n    {name: 'Top News', url: '/top-news'},\n    {name: 'Business', url: '/business'},\n    {name: 'Entertainment', url: '/entertainment'},\n    {name: 'General', url: '/general'},\n    {name: 'Health', url: '/health'},\n    {name: 'Science', url: '/science'},\n    {name: 'Sports', url: '/sports'},\n    {name: 'Technology', url: '/technology'}\n];\n\n\n\nconst activeEvent = (match, location) => {\n    return match\n};\n\nconst TopNav = (props) => {\n    const {device,mobileOpen,handleToggle,closeToggle} = props;\n\n    return (\n        <div>\n            <div className={'top-nav'}>\n                {device==='mobile'?<div className={'mobile-toggle'} onClick={handleToggle}>\n                    <span className={'line'}/>\n                    <span className={'line'}/>\n                    <span className={'line'}/>\n                </div>:''}\n                <div className={'top-logo'}>React News</div>\n                <div className={device==='mobile'?`mobile-menu ${mobileOpen?'':'hide'}`:'top-menu'}>\n                    {\n                        menu.map((element, index) => {\n                            return <div key={index}>\n                                <NavLink activeClassName={'top-link-active'}\n                                         className={'top-link'}\n                                         isActive={activeEvent}\n                                         onClick={closeToggle}\n                                         to={element.url}\n                                         exact\n                                >\n                                    {element.name}\n                                </NavLink>\n                            </div>\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TopNav;\n","import React, {Component, lazy, Suspense} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport TopNav from './components/common/TopNav';\nimport Loading from './components/common/Loading';\nimport {throttle} from './utils/function';\nimport './App.css';\n\nconst Home = lazy(() => import('./components/Home'));\nconst NewsTemplate = lazy(()=>import('./components/common/NewsTemplate'));\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = ({\n            device:'pc',\n            mobileOpen:false\n        })\n    }\n\n    judgeWindowSize = ()=>{\n        let device = this.state.device;\n        let compareDevice = null;\n        if(window.matchMedia('(max-width: 768px)').matches){\n            compareDevice = 'mobile'\n        }else{\n            compareDevice = 'pc'\n        }\n        if(compareDevice !== device){\n            this.setState({\n                device:compareDevice\n            })\n        }\n    };\n\n    handleToggle = ()=>{\n        this.setState(prevState=>({\n            mobileOpen:!prevState.mobileOpen\n        }))\n    };\n\n    closeToggle=()=>{\n        this.setState({\n            mobileOpen:false\n        })\n    }\n\n    componentDidMount(){\n        this.judgeWindowSize();\n        window.addEventListener('resize',(e)=>{\n            e.preventDefault();\n            throttle(this.judgeWindowSize(),50)\n        });\n    }\n    render() {\n        const {device,mobileOpen} = this.state;\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <div>\n                    <TopNav device={device} mobileOpen={mobileOpen} closeToggle={this.closeToggle} handleToggle={this.handleToggle}/>\n                    <Suspense fallback={<Loading global={true}/>}>\n                        <Switch>\n                            <Route path='/' component={props=><Home device={device}/>} exact/>\n                            <Route path={'/top-news'} key={'top-news'} render={props=><NewsTemplate {...props}/>} onRouterEnter={match=>console.log(match)}/>\n                            <Route path={'/business'} key={'business'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/entertainment'} key={'entertainment'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/general'} key={'general'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/health'} key={'health'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/science'} key={'science'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/sports'} key={'sports'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route path={'/technology'} key={'technology'} render={props=><NewsTemplate {...props}/>}/>\n                            <Route render={(props) => (404)}/>\n                        </Switch>\n                    </Suspense>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}